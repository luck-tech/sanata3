/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as FormImport } from './routes/form'
import { Route as LayoutImport } from './routes/_layout'
import { Route as IndexImport } from './routes/index'
import { Route as GithubCallbackImport } from './routes/github/callback'
import { Route as LayoutNewImport } from './routes/_layout/new'
import { Route as LayoutHomeImport } from './routes/_layout/home'
import { Route as LayoutRoomIdIndexImport } from './routes/_layout/$roomId/index'
import { Route as LayoutUsersUsernameImport } from './routes/_layout/users/$username'
import { Route as LayoutRoomIdMeetingImport } from './routes/_layout/$roomId/meeting'
import { Route as LayoutRoomIdDescriptionImport } from './routes/_layout/$roomId/description'

// Create/Update Routes

const FormRoute = FormImport.update({
  id: '/form',
  path: '/form',
  getParentRoute: () => rootRoute,
} as any)

const LayoutRoute = LayoutImport.update({
  id: '/_layout',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const GithubCallbackRoute = GithubCallbackImport.update({
  id: '/github/callback',
  path: '/github/callback',
  getParentRoute: () => rootRoute,
} as any)

const LayoutNewRoute = LayoutNewImport.update({
  id: '/new',
  path: '/new',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutHomeRoute = LayoutHomeImport.update({
  id: '/home',
  path: '/home',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutRoomIdIndexRoute = LayoutRoomIdIndexImport.update({
  id: '/$roomId/',
  path: '/$roomId/',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutUsersUsernameRoute = LayoutUsersUsernameImport.update({
  id: '/users/$username',
  path: '/users/$username',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutRoomIdMeetingRoute = LayoutRoomIdMeetingImport.update({
  id: '/$roomId/meeting',
  path: '/$roomId/meeting',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutRoomIdDescriptionRoute = LayoutRoomIdDescriptionImport.update({
  id: '/$roomId/description',
  path: '/$roomId/description',
  getParentRoute: () => LayoutRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_layout': {
      id: '/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutImport
      parentRoute: typeof rootRoute
    }
    '/form': {
      id: '/form'
      path: '/form'
      fullPath: '/form'
      preLoaderRoute: typeof FormImport
      parentRoute: typeof rootRoute
    }
    '/_layout/home': {
      id: '/_layout/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof LayoutHomeImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/new': {
      id: '/_layout/new'
      path: '/new'
      fullPath: '/new'
      preLoaderRoute: typeof LayoutNewImport
      parentRoute: typeof LayoutImport
    }
    '/github/callback': {
      id: '/github/callback'
      path: '/github/callback'
      fullPath: '/github/callback'
      preLoaderRoute: typeof GithubCallbackImport
      parentRoute: typeof rootRoute
    }
    '/_layout/$roomId/description': {
      id: '/_layout/$roomId/description'
      path: '/$roomId/description'
      fullPath: '/$roomId/description'
      preLoaderRoute: typeof LayoutRoomIdDescriptionImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/$roomId/meeting': {
      id: '/_layout/$roomId/meeting'
      path: '/$roomId/meeting'
      fullPath: '/$roomId/meeting'
      preLoaderRoute: typeof LayoutRoomIdMeetingImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/users/$username': {
      id: '/_layout/users/$username'
      path: '/users/$username'
      fullPath: '/users/$username'
      preLoaderRoute: typeof LayoutUsersUsernameImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/$roomId/': {
      id: '/_layout/$roomId/'
      path: '/$roomId'
      fullPath: '/$roomId'
      preLoaderRoute: typeof LayoutRoomIdIndexImport
      parentRoute: typeof LayoutImport
    }
  }
}

// Create and export the route tree

interface LayoutRouteChildren {
  LayoutHomeRoute: typeof LayoutHomeRoute
  LayoutNewRoute: typeof LayoutNewRoute
  LayoutRoomIdDescriptionRoute: typeof LayoutRoomIdDescriptionRoute
  LayoutRoomIdMeetingRoute: typeof LayoutRoomIdMeetingRoute
  LayoutUsersUsernameRoute: typeof LayoutUsersUsernameRoute
  LayoutRoomIdIndexRoute: typeof LayoutRoomIdIndexRoute
}

const LayoutRouteChildren: LayoutRouteChildren = {
  LayoutHomeRoute: LayoutHomeRoute,
  LayoutNewRoute: LayoutNewRoute,
  LayoutRoomIdDescriptionRoute: LayoutRoomIdDescriptionRoute,
  LayoutRoomIdMeetingRoute: LayoutRoomIdMeetingRoute,
  LayoutUsersUsernameRoute: LayoutUsersUsernameRoute,
  LayoutRoomIdIndexRoute: LayoutRoomIdIndexRoute,
}

const LayoutRouteWithChildren =
  LayoutRoute._addFileChildren(LayoutRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof LayoutRouteWithChildren
  '/form': typeof FormRoute
  '/home': typeof LayoutHomeRoute
  '/new': typeof LayoutNewRoute
  '/github/callback': typeof GithubCallbackRoute
  '/$roomId/description': typeof LayoutRoomIdDescriptionRoute
  '/$roomId/meeting': typeof LayoutRoomIdMeetingRoute
  '/users/$username': typeof LayoutUsersUsernameRoute
  '/$roomId': typeof LayoutRoomIdIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof LayoutRouteWithChildren
  '/form': typeof FormRoute
  '/home': typeof LayoutHomeRoute
  '/new': typeof LayoutNewRoute
  '/github/callback': typeof GithubCallbackRoute
  '/$roomId/description': typeof LayoutRoomIdDescriptionRoute
  '/$roomId/meeting': typeof LayoutRoomIdMeetingRoute
  '/users/$username': typeof LayoutUsersUsernameRoute
  '/$roomId': typeof LayoutRoomIdIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_layout': typeof LayoutRouteWithChildren
  '/form': typeof FormRoute
  '/_layout/home': typeof LayoutHomeRoute
  '/_layout/new': typeof LayoutNewRoute
  '/github/callback': typeof GithubCallbackRoute
  '/_layout/$roomId/description': typeof LayoutRoomIdDescriptionRoute
  '/_layout/$roomId/meeting': typeof LayoutRoomIdMeetingRoute
  '/_layout/users/$username': typeof LayoutUsersUsernameRoute
  '/_layout/$roomId/': typeof LayoutRoomIdIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/form'
    | '/home'
    | '/new'
    | '/github/callback'
    | '/$roomId/description'
    | '/$roomId/meeting'
    | '/users/$username'
    | '/$roomId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/form'
    | '/home'
    | '/new'
    | '/github/callback'
    | '/$roomId/description'
    | '/$roomId/meeting'
    | '/users/$username'
    | '/$roomId'
  id:
    | '__root__'
    | '/'
    | '/_layout'
    | '/form'
    | '/_layout/home'
    | '/_layout/new'
    | '/github/callback'
    | '/_layout/$roomId/description'
    | '/_layout/$roomId/meeting'
    | '/_layout/users/$username'
    | '/_layout/$roomId/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LayoutRoute: typeof LayoutRouteWithChildren
  FormRoute: typeof FormRoute
  GithubCallbackRoute: typeof GithubCallbackRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LayoutRoute: LayoutRouteWithChildren,
  FormRoute: FormRoute,
  GithubCallbackRoute: GithubCallbackRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_layout",
        "/form",
        "/github/callback"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_layout": {
      "filePath": "_layout.tsx",
      "children": [
        "/_layout/home",
        "/_layout/new",
        "/_layout/$roomId/description",
        "/_layout/$roomId/meeting",
        "/_layout/users/$username",
        "/_layout/$roomId/"
      ]
    },
    "/form": {
      "filePath": "form.tsx"
    },
    "/_layout/home": {
      "filePath": "_layout/home.tsx",
      "parent": "/_layout"
    },
    "/_layout/new": {
      "filePath": "_layout/new.tsx",
      "parent": "/_layout"
    },
    "/github/callback": {
      "filePath": "github/callback.tsx"
    },
    "/_layout/$roomId/description": {
      "filePath": "_layout/$roomId/description.tsx",
      "parent": "/_layout"
    },
    "/_layout/$roomId/meeting": {
      "filePath": "_layout/$roomId/meeting.tsx",
      "parent": "/_layout"
    },
    "/_layout/users/$username": {
      "filePath": "_layout/users/$username.tsx",
      "parent": "/_layout"
    },
    "/_layout/$roomId/": {
      "filePath": "_layout/$roomId/index.tsx",
      "parent": "/_layout"
    }
  }
}
ROUTE_MANIFEST_END */
